import java.util.*;

// queue node used in BFS
class Node
{
    // (x, y) represents chess board coordinates
    // dist represent its minimum distance from the source
    int x, y, dist;

	// maintain a parent node for printing final path
    Node parent;

    public Node(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public Node(int x, int y, int dist, Node parent) {
        this.x = x;
        this.y = y;
        this.dist = dist;
        this.parent = parent;
    }

    // As we are using class object as a key in a HashMap
    // we need to implement hashCode() and equals()

    // -- below methods are generated by IntelliJ IDEA (Alt + Insert) --
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Node node = (Node) o;

        if (x != node.x) return false;
        if (y != node.y) return false;
        return dist == node.dist;
    }

    @Override
    public int hashCode() {
        int result = x;
        result = 31 * result + y;
        result = 31 * result + dist;
        return result;
    }

    @Override
    public String toString() {
        return "(" + x + ", " + y + ')';
    }
};

class Main
{
    // Below arrays details all 8 possible movements for a knight
    private static int row[] = { 2, 2, -2, -2, 1, 1, -1, -1 };
    private static int col[] = { -1, 1, 1, -1, 2, -2, 2, -2 };

    // Check if (x, y) is valid chess board coordinates
    // Note that a knight cannot go out of the chessboard
    private static boolean valid(int x, int y, int N)
    {
        if (x < 0 || y < 0 || x >= N || y >= N)
            return false;

        return true;
    }

    // Utility function to print complete path from the source node
    // to the destination node
    private static void printPath(Node node) {
        if (node == null) {
            return;
        }
        printPath(node.parent);
        System.out.print(node + " ");
    }

    // Find minimum number of steps taken by the knight
    // from source to reach destination using BFS
    public static Node BFS(Node src, Node dest, int N)
    {
        // set to check if matrix cell is visited before or not
        Set<Node> visited = new HashSet<>();

        // create a queue and enqueue first node
        Queue<Node> q = new ArrayDeque<>();
        q.add(src);

        Node node = null;

        // run till queue is not empty
        while (!q.isEmpty())
        {
            // pop front node from queue and process it
            node = q.poll();

            int x = node.x;
            int y = node.y;
            int dist = node.dist;

            // if destination is reached, return distance
            if (x == dest.x && y == dest.y) {
                return node;
            }

            // Skip if location is visited before
            if (!visited.contains(node))
            {
                // mark current node as visited
                visited.add(node);

                // check for all 8 possible movements for a knight
                // and enqueue each valid movement into the queue
                for (int i = 0; i < 8; i++)
                {
                    // Get the new valid position of Knight from current
                    // position on chessboard and enqueue it in the
                    // queue with +1 distance
                    int x1 = x + row[i];
                    int y1 = y + col[i];

                    if (valid(x1, y1, N)) {
                        q.add(new Node(x1, y1, dist + 1, node));
                    }
                }
            }
        }

        // return null if path is not possible
        return null;
    }

    public static void main(String[] args)
    {
        int N = 8;

        // source coordinates
        Node src = new Node(0, 7);

        // destination coordinates
        Node dest = new Node(7, 0);

        Node node = BFS(src, dest, N);
        if (node != null) {
            System.out.println("Minimum number of steps required is " + node.dist);
            System.out.print("The complete path is: "); printPath(node);
        } else {
            System.out.println("Path is not possible.");
        }
    }
}